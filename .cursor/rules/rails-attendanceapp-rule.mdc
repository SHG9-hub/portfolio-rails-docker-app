---
description: 
globs: 
alwaysApply: true
---
はい、承知いたしました。RailsでDevise、RSpec、Dockerを使用した勤怠管理アプリの要件定義書とタスクリストを作成します。

## 勤怠管理アプリケーション 要件定義書

### 1. はじめに
コードを生成する際、質問に回答する際は必ず現在の進捗や仕様を確認してそれを踏まえた上で回答すること。

* **目的:** 本ドキュメントは、Rails、Devise、RSpec、Dockerを使用して開発する勤怠管理アプリケーションの要件を定義することを目的とします。
* **対象読者:** 開発チーム、プロジェクト関係者
* **スコープ:** 本ドキュメントで定義される範囲内でアプリケーションを開発します。

### 2. アプリケーション概要

* **名称 (仮称):** シンプル勤怠管理アプリ
* **目的:** 従業員が自身の出退勤時間を記録し、勤務履歴を確認できるウェブアプリケーションを提供します。
* **主な機能:**
    * ユーザー登録・ログイン・ログアウト
    * 出勤・退勤打刻
    * 打刻履歴の確認 (日別・月別)
    * 勤務時間の自動計算
* **想定ユーザー:** 本アプリケーションを利用する従業員

### 3. 機能要件

#### 3.1. ユーザー管理

* **UY-001: 新規登録:**
    * ユーザーはメールアドレスとパスワードを使用して新規登録できる。
    * 登録時にはメールアドレスの一意性チェックを行う。
* **UY-002: ログイン:**
    * 登録済みのユーザーはメールアドレスとパスワードを使用してログインできる。
* **UY-003: ログアウト:**
    * ログイン中のユーザーはログアウトできる。
* **UY-004: パスワードリセット:**
    * パスワードを忘れたユーザーは、登録済みのメールアドレスを使用してパスワードをリセットできる。
* **UY-005: ユーザー情報編集 (オプション):**
    * ログイン中のユーザーは自身の登録情報を編集できる。 (今回は基本的な勤怠機能に注力するため、優先度低)

#### 3.2. 勤怠管理

* **AT-001: 出勤打刻:**
    * ログイン中のユーザーは出勤時間を打刻できる。
    * 既に出勤打刻済みの場合は、再度出勤打刻できないように制御する。
    * 打刻日時を正確に記録する。
* **AT-002: 退勤打刻:**
    * ログイン中のユーザーは退勤時間を打刻できる。
    * 出勤打刻をしていない場合は、退勤打刻できないように制御する。
    * 打刻日時を正確に記録する。
* **AT-003: 休憩開始・終了打刻 (オプション):**
    * ログイン中のユーザーは休憩開始・終了を打刻できる。
    * 出勤中にのみ休憩の打刻ができるように制御する。
    * 休憩開始中に再度休憩開始、休憩終了中に再度休憩終了はできないように制御する。 (今回は基本的な勤怠機能に注力するため、優先度低)
* **AT-004: 打刻履歴表示 (日別):**
    * ログイン中のユーザーは自身の日別打刻履歴を確認できる。
    * 日付、出勤時間、退勤時間、休憩時間、勤務時間が表示される。
* **AT-005: 打刻履歴表示 (月別):**
    * ログイン中のユーザーは自身の月別打刻履歴を確認できる。
    * 月ごとの勤務日数の集計、合計勤務時間などが表示される。
* **AT-006: 勤務時間計算:**
    * 出勤時間と退勤時間、および記録された休憩時間から自動的に勤務時間を計算する。

### 4. 非機能要件

* **NF-001: セキュリティ:** Devise gem を使用し、セキュアな認証・認可を実装する。パスワードはハッシュ化して保存する。
* **NF-002: パフォーマンス:** 一般的な利用において、ページの表示や打刻処理が遅延なく行われること。
* **NF-003: 開発環境:** Docker を使用し、ローカル環境に依存しない開発環境を構築する。関係者間で容易に環境を共有できること。
* **NF-004: テスト:** RSpec を使用し、モデル、コントローラー、システムのテストコードを作成し、品質を担保する。主要な機能についてはテストカバレッジを高める。
* **NF-005: 運用・保守:** シンプルな構成とし、今後の機能追加やメンテナンスが行いやすいコードを記述する。

### 5. 使用技術

* **フレームワーク:** Ruby on Rails
* **データベース:** PostgreSQL (Dockerコンテナとして起動)
* **認証:** Devise gem
* **テスト:** RSpec gem
* **コンテナ:** Docker, Docker Compose
* **フロントエンド:** Rails 標準のビューテンプレート (ERB)、基本的なHTML/CSS

### 6. 今後の展望 (オプション)

* 管理者機能 (全ユーザーの勤怠状況確認、編集)
* CSVエクスポート機能
* 休暇申請機能
* モバイルフレンドリーなUI改善

---

## 勤怠管理アプリケーション タスクリスト (細分化)

上記要件定義書に基づき、開発タスクを細分化します。

### フェーズ0: 準備・環境構築

* **0.1. プロジェクト初期設定**
    * 0.1.1. Rails 新規プロジェクト作成 (`rails new`)
    * 0.1.2. Gemfileに必要なgemを追加 (Devise, RSpec-rails, pg, puma, docker-railsなど)
    * 0.1.3. `bundle install` 実行
* **0.2. Docker 環境構築**
    * 0.2.1. プロジェクトルートに `Dockerfile` 作成 (Ruby, Rails, 必要なライブラリのインストール)
    * 0.2.2. プロジェクトルートに `docker-compose.yml` 作成 (アプリケーションコンテナ、DBコンテナの定義)
        * アプリケーションサービスの定義 (ビルド設定、ポートフォワーディング、ボリュームマウント)
        * DBサービスの定義 (イメージ指定, ポート, ボリューム, 環境変数)
    * 0.2.3. `database.yml` をDocker環境に合わせて修正 (ホスト名をDBサービス名に)
    * 0.2.4. `docker-compose build` 実行
    * 0.2.5. `docker-compose run web rails db:create` 実行
    * 0.2.6. `docker-compose up` でアプリケーションが起動し、ブラウザからアクセスできることを確認
* **0.3. テスト環境設定**
    * 0.3.1. `rails g rspec:install` 実行
    * 0.3.2. `.rspec`, `spec_helper.rb`, `rails_helper.rb` の基本設定確認

### フェーズ1: 認証機能 (Devise)

* **1.1. Devise セットアップ**
    * 1.1.1. `rails g devise:install` 実行
    * 1.1.2. `config/routes.rb` に Devise ルートを追加
    * 1.1.3. 環境設定ファイル (development.rb, test.rb) に Devise の設定 (default_url_options) を追加
    * 1.1.4. アプリケーションレイアウトファイルにフラッシュメッセージ表示を追加
* **1.2. User モデル作成**
    * 1.2.1. `rails g devise User` 実行 (User モデルと Devise 必要なカラムを含むマイグレーションファイル生成)
    * 1.2.2. `rails db:migrate` 実行 (Docker上で: `docker-compose run web rails db:migrate`)
* **1.3. 認証ビュー・コントローラー**
    * 1.3.1. デフォルトの Devise ビューを確認
    * 1.3.2. 必要であれば `rails g devise:views` でビューファイルを生成し、カスタマイズ
    * 1.3.3. 認証が必要なコントローラーに `before_action :authenticate_user!` を設定
    * 1.3.4. トップページなどを設定し、未ログインユーザーはログインページにリダイレクトされることを確認
* **1.4. 認証機能テスト (RSpec)**
    * 1.4.1. User モデルのバリデーションに関するModel Specを作成
    * 1.4.2. サインアップ、ログイン、ログアウト、パスワードリセットのSystem Spec (Capybaraを使用) を作成

### フェーズ2: 勤怠機能

* **2.1. Attendance (勤怠記録) モデル作成**
    * 2.1.1. `rails g model Attendance user:references attendance_time:datetime leaving_time:datetime break_start_time:datetime break_end_time:datetime` 実行
    * 2.1.2. マイグレーションファイルを確認し、必要であればインデックスなどを追加
    * 2.1.3. `rails db:migrate` 実行
    * 2.1.4. User モデルと Attendance モデルのアソシエーション (`has_many`, `belongs_to`) を設定
* **2.2. 勤怠打刻機能**
    * 2.2.1. AttendanceController を作成 (`rails g controller Attendances`)
    * 2.2.2. 勤怠打刻用のビューページ (例: トップページまたは専用ページ) を作成
    * 2.2.3. 出勤ボタン、退勤ボタンをビューに設置
    * 2.2.4. AttendanceController に出勤アクション (`create` または専用アクション) を作成
        * ログインユーザーの Attendance レコードを作成し、`attendance_time` を現在時刻で保存
        * 既にその日の出勤記録がある場合はエラーとするロジックを追加
    * 2.2.5. AttendanceController に退勤アクション (`update` または専用アクション) を作成
        * ログインユーザーのその日の最新の Attendance レコードを取得
        * `leaving_time` を現在時刻で更新
        * 出勤記録がない場合、または既に退勤記録がある場合はエラーとするロジックを追加
    * 2.2.6. ボタンの活性/非活性を制御するロジック (ビューまたはヘルパー) を実装 (例: 出勤打刻済みなら出勤ボタンを非活性化)
    * 2.2.7. ルーティングを設定
* **2.3. 勤務時間計算ロジック**
    * 2.3.1. Attendance モデルに勤務時間を計算するインスタンスメソッド (例: `working_hours`) を追加
        * `leaving_time` と `attendance_time` の差分を計算
        * 休憩時間がある場合はその時間を差し引く (休憩機能実装する場合)
    * 2.3.2. 計算結果が正確であることをModel Specでテスト
* **2.4. 打刻履歴表示**
    * 2.4.1. AttendanceController に履歴表示アクション (例: `index`) を作成
    * 2.4.2. ログインユーザーの勤怠記録を取得
    * 2.4.3. 履歴表示用のビューを作成 (日別表示)
        * 日付、出勤、退勤、勤務時間を一覧表示
    * 2.4.4. 月別集計表示用のビュー (例: `monthly_summary`) を作成
        * Controllerで月ごとのデータを集計 (勤務日数、合計勤務時間)
        * 集計結果をビューに表示
    * 2.4.5. ルーティングを設定
* **2.5. 勤怠機能テスト (RSpec)**
    * 2.5.1. Attendance モデルのアソシエーション、バリデーション、計算ロジックに関するModel Specを作成
    * 2.5.2. 勤怠打刻アクション (出勤、退勤) のController Specを作成 (パラメータに応じた正常系・異常系のテスト)
    * 2.5.3. 履歴表示 (日別、月別) のController Specを作成 (正しいデータが取得できているか)
    * 2.5.4. 勤怠打刻、履歴表示の一連の流れに関するSystem Spec (Capybara) を作成

### フェーズ3: UI/UX改善・追加機能 (必要であれば)

* **3.1. フロントエンド改善**
    * 3.1.1. 簡単なCSSスタイリングの適用
    * 3.1.2. バリデーションエラーメッセージの適切な表示
    * 3.1.3. フラッシュメッセージの改善
* **3.2. バリデーション・エラーハンドリング**
    * 3.2.1. モデルに適切なバリデーションを追加 (例: 退勤時間は出勤時間より後であること)
    * 3.2.2. コントローラーでバリデーションエラー発生時の処理を実装
    * 3.2.3. エラーメッセージをユーザーにわかりやすく表示

### フェーズ4: テスト・リファクタリング

* **4.1. 総合テスト**
    * 4.1.1. Model Spec, Controller Spec, System Spec 全体の実行と確認
    * 4.1.2. テストカバレッジの確認と必要に応じたテストコードの追加
* **4.2. コードのリファクタリング**
    * 4.2.1. 重複コードの削減
    * 4.2.2. メソッドや変数の命名規則の見直し
    * 4.2.3. 可読性の高いコードへの修正

### フェーズ5: デプロイ準備

* **5.1. 本番環境設定**
    * 5.1.1. `production.rb` など本番環境用の設定を確認・修正
    * 5.1.2. データベース設定 (本番環境用DBの指定)
    * 5.1.3. 環境変数管理方法の検討 (dotenv, Rails Credentialsなど)
* **5.2. デプロイ方法検討**
    * 5.2.1. デプロイ先の選定 (Heroku, AWS, Renderなど)
    * 5.2.2. デプロイ手順の確認と準備

---

この要件定義書とタスクリストをベースに開発を進めていくことができます。開発途中で新たな要件やタスクが見つかった場合は、適宜このドキュメントを更新してください。頑張ってください！