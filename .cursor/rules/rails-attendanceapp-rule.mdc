---
description: 
globs: 
alwaysApply: false
---
**Docker環境での勤怠管理アプリケーション開発ルール**

## Docker環境前提
すべてのRailsコマンドは以下の形式で実行:
```bash
docker compose run --rm web [command]
```

## 現在のプロジェクト状況 ✅
- ✅ Rails 7.1.5 + Ruby 3.2.2
- ✅ PostgreSQL (Docker)
- ✅ Devise gem インストール済み
- ✅ RSpec gem インストール済み  
- ✅ Docker環境構築済み
- ✅ 基本的なgemファイル設定完了

## 勤怠管理アプリケーション 要件定義書

### 1. アプリケーション概要
* **名称**: シンプル勤怠管理アプリ
* **目的**: 従業員が自身の出退勤時間を記録し、勤務履歴を確認できるウェブアプリケーション

### 2. 機能要件

#### 2.1. ユーザー管理 (Devise使用)
* **UY-001**: メールアドレス・パスワードでの新規登録
* **UY-002**: ログイン/ログアウト機能  
* **UY-003**: パスワードリセット機能

#### 2.2. 勤怠管理機能
* **AT-001**: 出勤打刻（重複打刻防止）
* **AT-002**: 退勤打刻（出勤後のみ可能）
* **AT-003**: 打刻履歴表示（日別・月別）
* **AT-004**: 勤務時間自動計算

### 3. 開発タスクリスト（優先順）

#### 🔥 Phase 1: Devise設定完了
```bash
# Devise初期設定
docker compose run --rm web rails generate devise:install
docker compose run --rm web rails generate devise User
docker compose run --rm web rails db:migrate

# RSpec設定
docker compose run --rm web rails generate rspec:install
```

#### 🔥 Phase 2: 勤怠モデル作成
```bash
# Attendanceモデル生成
docker compose run --rm web rails generate model Attendance user:references attendance_time:datetime leaving_time:datetime
docker compose run --rm web rails db:migrate
```

#### 🔥 Phase 3: コントローラー・ビュー作成  
```bash
# コントローラー生成
docker compose run --rm web rails generate controller Attendances index create update

# ルート設定
# resources :attendances, only: [:index, :create, :update]
```

#### 🔥 Phase 4: テスト作成
```bash
# テスト実行
docker compose run --rm web bundle exec rspec
```

### 4. データベース設計

#### Users テーブル (Devise)
- id, email, encrypted_password, created_at, updated_at

#### Attendances テーブル  
- id, user_id, attendance_time, leaving_time, created_at, updated_at

### 5. Docker環境コマンド集

#### 基本操作
```bash
# 環境起動
docker compose up

# バックグラウンド起動  
docker compose up -d

# ログ確認
docker compose logs web

# コンテナ停止
docker compose down

# データベースリセット
docker compose run --rm web rails db:drop db:create db:migrate
```

#### 開発コマンド
```bash
# マイグレーション
docker compose run --rm web rails db:migrate
docker compose run --rm web rails db:rollback

# シード実行
docker compose run --rm web rails db:seed

# コンソール
docker compose run --rm web rails console

# ルート確認
docker compose run --rm web rails routes

# テスト実行  
docker compose run --rm web bundle exec rspec
docker compose run --rm web bundle exec rspec spec/models/
docker compose run --rm web bundle exec rspec spec/controllers/
```

#### トラブルシューティング
```bash
# Gemfile変更後
docker compose build web
docker compose run --rm web bundle install

# アセット関連
docker compose run --rm web rails assets:precompile
docker compose run --rm web rails assets:clobber

# PIDファイル削除
docker compose run --rm web rm -f tmp/pids/server.pid
```

### 6. 品質管理

#### テスト方針
- Model Spec: バリデーション、アソシエーション、メソッドのテスト
- Controller Spec: アクション、パラメータ処理のテスト  
- System Spec: ユーザー操作フローのテスト

#### セキュリティ
- Devise デフォルト設定を使用
- 認証必須ページの設定（before_action :authenticate_user!）
- パラメータの適切なフィルタリング

### 7. 進捗管理

**現在のステータス**: Phase 1実行待ち

**次のアクション**: 
1. Devise設定の完了確認
2. User認証のテスト実行  
3. Attendanceモデルの作成

**完了条件**:
- すべてのテストがパス
- Docker環境で正常動作
- 基本的な勤怠機能が使用可能

---

**重要**: 必ずDocker環境でのコマンド実行を徹底し、ローカル環境でのRails実行は避けてください。