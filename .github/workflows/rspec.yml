name: RSpec Tests and Deploy

on:
  push:
    branches: [main] # プッシュ時に実行したいブランチを指定
  pull_request:
    branches: [main] # プルリクエスト時に実行したいブランチを指定

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: portfolio-rails-production
  ECS_CLUSTER: portfolio-rails-production-cluster
  ECS_SERVICE: portfolio-rails-production-service

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      # PostgreSQLサービスコンテナを定義
      postgres:
        image: postgres:13 # 使用するPostgreSQLのバージョンを指定
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: app_test # database.ymlのtest環境のdatabase名に合わせてください
          POSTGRES_USER: postgres # database.ymlのtest環境のusernameに合わせてください
          POSTGRES_PASSWORD: password # database.ymlのtest環境のpasswordに合わせてください
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version # または '3.x.x' のように具体的なバージョンを指定
          bundler-cache: true # bundle install をキャッシュする

      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in $(seq 1 20); do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL... ($i/20)"
            sleep 2
          done
          echo "PostgreSQL did not become ready"
          exit 1
        env:
          PGUSER: postgres
          PGPASSWORD: password

      - name: Compile Sass assets
        run: bundle exec rails dartsass:build
        env:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password
          PGDATABASE: app_test

      - name: Setup database
        run: |
          bundle exec rails db:drop RAILS_ENV=test || true
          bundle exec rails db:create RAILS_ENV=test
          bundle exec rails db:schema:load RAILS_ENV=test
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password
          PGDATABASE: app_test
          RAILS_ENV: test

      - name: Run RSpec tests
        run: bundle exec rspec
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: password
          PGDATABASE: app_test
          RAILS_ENV: test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify secrets configuration
        run: |
          echo "🔍 Checking secrets configuration..."
          if [ -z "${{ secrets.RAILS_MASTER_KEY }}" ]; then
            echo "❌ RAILS_MASTER_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PGHOST }}" ]; then
            echo "❌ PGHOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PGUSER }}" ]; then
            echo "❌ PGUSER is not set" 
            exit 1
          fi
          if [ -z "${{ secrets.PGPASSWORD }}" ]; then
            echo "❌ PGPASSWORD is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PGDATABASE }}" ]; then
            echo "❌ PGDATABASE is not set"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building Docker image..."
          docker build \
            --build-arg RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }} \
            --build-arg PGHOST=${{ secrets.PGHOST }} \
            --build-arg PGUSER=${{ secrets.PGUSER }} \
            --build-arg PGPASSWORD=${{ secrets.PGPASSWORD }} \
            --build-arg PGDATABASE=${{ secrets.PGDATABASE }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          echo "🏷️ Tagging images..."
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "📤 Pushing images to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "✅ Docker build and push completed successfully"

      - name: Update ECS service with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🔍 Checking ECS service status..."
          if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION --query 'services[0].serviceName' --output text 2>/dev/null | grep -q "$ECS_SERVICE"; then
            echo "✅ ECS service exists"
            
            # 新しいイメージURIを準備
            NEW_IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:latest"
            echo "🖼️ Using image URI: $NEW_IMAGE_URI"
            
            # 現在のTaskDefinitionを取得し、必要なフィールドのみ抽出
            echo "📋 Getting current task definition..."
            TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition $ECR_REPOSITORY --query 'taskDefinition.{family: family, networkMode: networkMode, requiresCompatibilities: requiresCompatibilities, cpu: cpu, memory: memory, executionRoleArn: executionRoleArn, taskRoleArn: taskRoleArn, containerDefinitions: containerDefinitions}')
            
            # コンテナイメージを新しいURIに更新
            echo "🔄 Updating container image..."
            UPDATED_TASK_DEF=$(echo "$TASK_DEF_JSON" | jq --arg image "$NEW_IMAGE_URI" '.containerDefinitions[0].image = $image')
            
            # 新しいTaskDefinitionを登録
            echo "📝 Registering new task definition..."
            echo "$UPDATED_TASK_DEF" > /tmp/task-def.json
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file:///tmp/task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
            echo "✅ New task definition registered: $NEW_TASK_DEF_ARN"
            
            # ECSサービスを新しいTaskDefinitionで更新
            echo "🚀 Updating ECS service..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition $NEW_TASK_DEF_ARN
              
            echo "✅ ECS service update completed successfully"
          else
            echo "⚠️ ECS service $ECS_SERVICE does not exist in cluster $ECS_CLUSTER"
            echo "📝 Next steps: Create ECS service via CloudFormation or AWS Console"
            echo "🚀 Docker image has been successfully pushed to ECR and is ready for deployment"
          fi
